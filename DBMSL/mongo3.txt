[TE@localhost ~]$ mongo
MongoDB shell version v4.2.22
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("303b7c07-babc-4d25-b309-f52960f7cb62") }
MongoDB server version: 4.2.22
Server has startup warnings: 
2023-10-18T08:55:46.018+0530 I  STORAGE  [initandlisten] 
2023-10-18T08:55:46.018+0530 I  STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2023-10-18T08:55:46.018+0530 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2023-10-18T08:55:47.801+0530 I  CONTROL  [initandlisten] 
2023-10-18T08:55:47.801+0530 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2023-10-18T08:55:47.801+0530 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2023-10-18T08:55:47.801+0530 I  CONTROL  [initandlisten] 
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> show dbs
admin       0.000GB
config      0.000GB
local       0.000GB
te31148_db  0.000GB
> use te31152_db
switched to db te31152_db
> db.laptops.insertOne({name:"Macbook m1",price:100,year:2023});
{
	"acknowledged" : true,
	"insertedId" : ObjectId("652f52d47bdc6b8d82925c4b")
}
> db.laptops.find();
{ "_id" : ObjectId("652f52d47bdc6b8d82925c4b"), "name" : "Macbook m1", "price" : 100, "year" : 2023 }
> db.laptops.insert([{name:"Surface Pro",price:90,year:2022},{name:"Dell Vostro 3405",price:50}]);
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> db.laptops.insertMany([{name:"Surface Pro",price:90,year:2022},{name:"Dell Vostro 3405",price:50}]);
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("652f532d7bdc6b8d82925c4e"),
		ObjectId("652f532d7bdc6b8d82925c4f")
	]
}
> db.laptops.find();
{ "_id" : ObjectId("652f52d47bdc6b8d82925c4b"), "name" : "Macbook m1", "price" : 100, "year" : 2023 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4c"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4d"), "name" : "Dell Vostro 3405", "price" : 50 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4e"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4f"), "name" : "Dell Vostro 3405", "price" : 50 }
> db.laptops.update({price:50},{name:"Dell Vostro 3405",price:50,year:2021});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.laptops.find();
{ "_id" : ObjectId("652f52d47bdc6b8d82925c4b"), "name" : "Macbook m1", "price" : 100, "year" : 2023 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4c"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4d"), "name" : "Dell Vostro 3405", "price" : 50, "year" : 2021 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4e"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4f"), "name" : "Dell Vostro 3405", "price" : 50 }
> db.laptops.delete({_id:ObjectId("652f532d7bdc6b8d82925c4f")});
2023-10-18T09:10:26.409+0530 E  QUERY    [js] uncaught exception: TypeError: db.laptops.delete is not a function :
@(shell):1:1
> db.laptops.remove({_id:ObjectId("652f532d7bdc6b8d82925c4f")});
WriteResult({ "nRemoved" : 1 })
> db.laptops.find();
{ "_id" : ObjectId("652f52d47bdc6b8d82925c4b"), "name" : "Macbook m1", "price" : 100, "year" : 2023 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4c"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4d"), "name" : "Dell Vostro 3405", "price" : 50, "year" : 2021 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4e"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
> db.laptops.find().pretty();
{
	"_id" : ObjectId("652f52d47bdc6b8d82925c4b"),
	"name" : "Macbook m1",
	"price" : 100,
	"year" : 2023
}
{
	"_id" : ObjectId("652f53247bdc6b8d82925c4c"),
	"name" : "Surface Pro",
	"price" : 90,
	"year" : 2022
}
{
	"_id" : ObjectId("652f53247bdc6b8d82925c4d"),
	"name" : "Dell Vostro 3405",
	"price" : 50,
	"year" : 2021
}
{
	"_id" : ObjectId("652f532d7bdc6b8d82925c4e"),
	"name" : "Surface Pro",
	"price" : 90,
	"year" : 2022
}
> db.createIndex({name:1});
2023-10-18T09:11:49.393+0530 E  QUERY    [js] uncaught exception: TypeError: db.createIndex is not a function :
@(shell):1:1
> db.laptops.createIndex({name:1});
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.laptops.getIndexes();
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "te31152_db.laptops"
	},
	{
		"v" : 2,
		"key" : {
			"name" : 1
		},
		"name" : "name_1",
		"ns" : "te31152_db.laptops"
	}
]
> db.laptops.aggregate([{$match:{price:{$gt:60}}}]);
{ "_id" : ObjectId("652f52d47bdc6b8d82925c4b"), "name" : "Macbook m1", "price" : 100, "year" : 2023 }
{ "_id" : ObjectId("652f53247bdc6b8d82925c4c"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
{ "_id" : ObjectId("652f532d7bdc6b8d82925c4e"), "name" : "Surface Pro", "price" : 90, "year" : 2022 }
> show dbs
admin       0.000GB
config      0.000GB
local       0.000GB
te31148_db  0.000GB
te31152_db  0.000GB
